openapi: 3.0.3
info:
  title: Customer booking service API
  version: 1.0.0
  description: API for managing customer bookings

tags:
  - name: Customers
    description: Operations related to customers
  - name: Brands
    description: Operations related to brands
  - name: Bookings
    description: Operations related to bookings

paths:
  #Customer
  /api/customers:
    get:
      summary: Get all customers
      tags:
        - Customers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDto'
    post:
      summary: Create a new customer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerDto'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
    put:
      summary: Update a customer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerDto'
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '404':
          description: Customer not found
    delete:
      summary: Delete a customer by ID
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Customer deleted
        '404':
          description: Customer not found

  /api/customers/{id}:
    get:
      summary: Get a customer by ID
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        '404':
          description: Customer not found

  /api/customers/bookings:
    get:
      summary: Get bookings for customer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDto'

  #Brand
  /api/brands:
    get:
      summary: Get all brands
      tags:
        - Brands
      responses:
        '200':
          description: A list of brands
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrandDto'
    post:
      summary: Create a new brand
      tags:
        - Brands
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBrandDto'
      responses:
        '201':
          description: Brand created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDto'
    put:
      summary: Update a brand
      tags:
        - Brands
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBrandDto'
      responses:
        '200':
          description: Brand updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDto'
        '404':
          description: Brand not found
    delete:
      summary: Delete a brand by ID
      tags:
        - Brands
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Brand deleted
        '404':
          description: Brand not found

  /api/brands/{id}:
    get:
      summary: Get a brand by ID
      tags:
        - Brands
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Brand found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandDto'
        '404':
          description: Brand not found

  /api/brands/{id}/bookings:
    get:
      summary: Get bookings for brand
      tags:
        - Brands
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDto'

  #Booking
  /api/bookings:
    post:
      summary: Creates booking for customer
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingDto'
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDto'
        '404':
          description: Customer not found
    delete:
      summary: Deletes booking for customer
      tags:
        - Bookings
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Booking deleted
        '404':
          description: Booking not found

  /api/bookings/{id}/brands/{brandId}:
    patch:
      summary: Adds brand to booking
      tags:
        - Bookings
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: brandId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Brand added
        '404':
          description: Booking or Brand not found

components:
  schemas:
    CustomerDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fullName:
          type: string
          example: John
        email:
          type: string
          example: John@gmail.com
        status:
          type: string
          example: ACTIVE
        age:
          type: integer
          example: 27
        created:
          type: string
          format: date
          example: "2024-01-15"
        updated:
          type: string
          format: date
          example: "2024-01-15"
    CreateCustomerDto:
      type: object
      properties:
        fullName:
          type: string
          example: John
        email:
          type: string
          example: John@gmail.com
        status:
          type: string
          example: ACTIVE
        age:
          type: integer
          example: 27
    UpdateCustomerDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fullName:
          type: string
          example: John
        email:
          type: string
          example: John@gmail.com
        status:
          type: string
          example: ACTIVE
        age:
          type: integer
          example: 27
    BrandDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John
        address:
          type: string
          example: Street example
        created:
          type: string
          format: date
          example: "2024-01-15"
        updated:
          type: string
          format: date
          example: "2024-01-15"
        shortCode:
          type: string
          example: BYD
    CreateBrandDto:
      type: object
      properties:
        name:
          type: string
          example: John
        address:
          type: string
          example: Street example
        created:
          type: string
          format: date
          example: "2024-01-15"
        updated:
          type: string
          format: date
          example: "2024-01-15"
        shortCode:
          type: string
          example: BYD
    UpdateBrandDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John
        address:
          type: string
          example: Street example
        created:
          type: string
          format: date
          example: "2024-01-15"
        updated:
          type: string
          format: date
          example: "2024-01-15"
        shortCode:
          type: string
          example: BYD
    BookingDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Booking title
        description:
          type: string
          example: Booking description
        status:
          type: string
          example: CANCELLED
        recordCreated:
          type: string
          format: date
          example: "2024-01-15"
        recordUpdated:
          type: string
          format: date
          example: "2024-02-15"
        startDate:
          type: string
          format: date
          example: "2024-03-15"
        endDate:
          type: string
          format: date
          example: "2024-04-15"
        brandName:
          type: string
          example: BYD
        customerId:
          type: integer
          format: int64
          example: 1
    CreateBookingDto:
      type: object
      properties:
        title:
          type: string
          example: Booking title
        description:
          type: string
          example: Booking description
        status:
          type: string
          example: CANCELLED
        startDate:
          type: string
          format: date
          example: "2024-03-15"
        endDate:
          type: string
          format: date
          example: "2024-04-15"
        customerId:
          type: integer
          format: int64
          example: 1